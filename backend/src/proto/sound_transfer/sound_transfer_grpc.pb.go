// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: backend/src/proto/sound_transfer/sound_transfer.proto

package sound_transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SoundServiceClient is the client API for SoundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoundServiceClient interface {
	TestConnection(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*TextMessage, error)
	SendSoundFile(ctx context.Context, in *SoundRequest, opts ...grpc.CallOption) (*SoundResponse, error)
	StreamSoundFile(ctx context.Context, opts ...grpc.CallOption) (SoundService_StreamSoundFileClient, error)
	SendSoundFileTranslation(ctx context.Context, in *SoundRequest, opts ...grpc.CallOption) (SoundService_SendSoundFileTranslationClient, error)
	DiarizateSpeakers(ctx context.Context, in *SoundRequest, opts ...grpc.CallOption) (SoundService_DiarizateSpeakersClient, error)
}

type soundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSoundServiceClient(cc grpc.ClientConnInterface) SoundServiceClient {
	return &soundServiceClient{cc}
}

func (c *soundServiceClient) TestConnection(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*TextMessage, error) {
	out := new(TextMessage)
	err := c.cc.Invoke(ctx, "/SoundService/TestConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundServiceClient) SendSoundFile(ctx context.Context, in *SoundRequest, opts ...grpc.CallOption) (*SoundResponse, error) {
	out := new(SoundResponse)
	err := c.cc.Invoke(ctx, "/SoundService/SendSoundFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundServiceClient) StreamSoundFile(ctx context.Context, opts ...grpc.CallOption) (SoundService_StreamSoundFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &SoundService_ServiceDesc.Streams[0], "/SoundService/StreamSoundFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &soundServiceStreamSoundFileClient{stream}
	return x, nil
}

type SoundService_StreamSoundFileClient interface {
	Send(*SoundRequest) error
	Recv() (*SoundStreamResponse, error)
	grpc.ClientStream
}

type soundServiceStreamSoundFileClient struct {
	grpc.ClientStream
}

func (x *soundServiceStreamSoundFileClient) Send(m *SoundRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *soundServiceStreamSoundFileClient) Recv() (*SoundStreamResponse, error) {
	m := new(SoundStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *soundServiceClient) SendSoundFileTranslation(ctx context.Context, in *SoundRequest, opts ...grpc.CallOption) (SoundService_SendSoundFileTranslationClient, error) {
	stream, err := c.cc.NewStream(ctx, &SoundService_ServiceDesc.Streams[1], "/SoundService/SendSoundFileTranslation", opts...)
	if err != nil {
		return nil, err
	}
	x := &soundServiceSendSoundFileTranslationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SoundService_SendSoundFileTranslationClient interface {
	Recv() (*SoundStreamResponse, error)
	grpc.ClientStream
}

type soundServiceSendSoundFileTranslationClient struct {
	grpc.ClientStream
}

func (x *soundServiceSendSoundFileTranslationClient) Recv() (*SoundStreamResponse, error) {
	m := new(SoundStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *soundServiceClient) DiarizateSpeakers(ctx context.Context, in *SoundRequest, opts ...grpc.CallOption) (SoundService_DiarizateSpeakersClient, error) {
	stream, err := c.cc.NewStream(ctx, &SoundService_ServiceDesc.Streams[2], "/SoundService/DiarizateSpeakers", opts...)
	if err != nil {
		return nil, err
	}
	x := &soundServiceDiarizateSpeakersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SoundService_DiarizateSpeakersClient interface {
	Recv() (*SpeakerAndLine, error)
	grpc.ClientStream
}

type soundServiceDiarizateSpeakersClient struct {
	grpc.ClientStream
}

func (x *soundServiceDiarizateSpeakersClient) Recv() (*SpeakerAndLine, error) {
	m := new(SpeakerAndLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SoundServiceServer is the server API for SoundService service.
// All implementations must embed UnimplementedSoundServiceServer
// for forward compatibility
type SoundServiceServer interface {
	TestConnection(context.Context, *TextMessage) (*TextMessage, error)
	SendSoundFile(context.Context, *SoundRequest) (*SoundResponse, error)
	StreamSoundFile(SoundService_StreamSoundFileServer) error
	SendSoundFileTranslation(*SoundRequest, SoundService_SendSoundFileTranslationServer) error
	DiarizateSpeakers(*SoundRequest, SoundService_DiarizateSpeakersServer) error
	mustEmbedUnimplementedSoundServiceServer()
}

// UnimplementedSoundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSoundServiceServer struct {
}

func (UnimplementedSoundServiceServer) TestConnection(context.Context, *TextMessage) (*TextMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (UnimplementedSoundServiceServer) SendSoundFile(context.Context, *SoundRequest) (*SoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSoundFile not implemented")
}
func (UnimplementedSoundServiceServer) StreamSoundFile(SoundService_StreamSoundFileServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSoundFile not implemented")
}
func (UnimplementedSoundServiceServer) SendSoundFileTranslation(*SoundRequest, SoundService_SendSoundFileTranslationServer) error {
	return status.Errorf(codes.Unimplemented, "method SendSoundFileTranslation not implemented")
}
func (UnimplementedSoundServiceServer) DiarizateSpeakers(*SoundRequest, SoundService_DiarizateSpeakersServer) error {
	return status.Errorf(codes.Unimplemented, "method DiarizateSpeakers not implemented")
}
func (UnimplementedSoundServiceServer) mustEmbedUnimplementedSoundServiceServer() {}

// UnsafeSoundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoundServiceServer will
// result in compilation errors.
type UnsafeSoundServiceServer interface {
	mustEmbedUnimplementedSoundServiceServer()
}

func RegisterSoundServiceServer(s grpc.ServiceRegistrar, srv SoundServiceServer) {
	s.RegisterService(&SoundService_ServiceDesc, srv)
}

func _SoundService_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundServiceServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SoundService/TestConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundServiceServer).TestConnection(ctx, req.(*TextMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoundService_SendSoundFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundServiceServer).SendSoundFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SoundService/SendSoundFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundServiceServer).SendSoundFile(ctx, req.(*SoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoundService_StreamSoundFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SoundServiceServer).StreamSoundFile(&soundServiceStreamSoundFileServer{stream})
}

type SoundService_StreamSoundFileServer interface {
	Send(*SoundStreamResponse) error
	Recv() (*SoundRequest, error)
	grpc.ServerStream
}

type soundServiceStreamSoundFileServer struct {
	grpc.ServerStream
}

func (x *soundServiceStreamSoundFileServer) Send(m *SoundStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *soundServiceStreamSoundFileServer) Recv() (*SoundRequest, error) {
	m := new(SoundRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SoundService_SendSoundFileTranslation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SoundRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SoundServiceServer).SendSoundFileTranslation(m, &soundServiceSendSoundFileTranslationServer{stream})
}

type SoundService_SendSoundFileTranslationServer interface {
	Send(*SoundStreamResponse) error
	grpc.ServerStream
}

type soundServiceSendSoundFileTranslationServer struct {
	grpc.ServerStream
}

func (x *soundServiceSendSoundFileTranslationServer) Send(m *SoundStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SoundService_DiarizateSpeakers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SoundRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SoundServiceServer).DiarizateSpeakers(m, &soundServiceDiarizateSpeakersServer{stream})
}

type SoundService_DiarizateSpeakersServer interface {
	Send(*SpeakerAndLine) error
	grpc.ServerStream
}

type soundServiceDiarizateSpeakersServer struct {
	grpc.ServerStream
}

func (x *soundServiceDiarizateSpeakersServer) Send(m *SpeakerAndLine) error {
	return x.ServerStream.SendMsg(m)
}

// SoundService_ServiceDesc is the grpc.ServiceDesc for SoundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SoundService",
	HandlerType: (*SoundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestConnection",
			Handler:    _SoundService_TestConnection_Handler,
		},
		{
			MethodName: "SendSoundFile",
			Handler:    _SoundService_SendSoundFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSoundFile",
			Handler:       _SoundService_StreamSoundFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendSoundFileTranslation",
			Handler:       _SoundService_SendSoundFileTranslation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DiarizateSpeakers",
			Handler:       _SoundService_DiarizateSpeakers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend/src/proto/sound_transfer/sound_transfer.proto",
}
