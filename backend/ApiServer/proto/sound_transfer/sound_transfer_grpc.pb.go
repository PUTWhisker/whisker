// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: backend/ApiServer/proto/sound_transfer/sound_transfer.proto

package sound_transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SoundServiceClient is the client API for SoundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoundServiceClient interface {
	TestConnection(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*TextMessage, error)
	TranscribeFile(ctx context.Context, in *TranscriptionRequest, opts ...grpc.CallOption) (*SoundResponse, error)
	TranscribeLive(ctx context.Context, opts ...grpc.CallOption) (SoundService_TranscribeLiveClient, error)
	TranslateFile(ctx context.Context, in *TranslationRequest, opts ...grpc.CallOption) (SoundService_TranslateFileClient, error)
	DiarizateFile(ctx context.Context, in *TranscriptionRequest, opts ...grpc.CallOption) (*SpeakerAndLineResponse, error)
}

type soundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSoundServiceClient(cc grpc.ClientConnInterface) SoundServiceClient {
	return &soundServiceClient{cc}
}

func (c *soundServiceClient) TestConnection(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*TextMessage, error) {
	out := new(TextMessage)
	err := c.cc.Invoke(ctx, "/SoundService/TestConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundServiceClient) TranscribeFile(ctx context.Context, in *TranscriptionRequest, opts ...grpc.CallOption) (*SoundResponse, error) {
	out := new(SoundResponse)
	err := c.cc.Invoke(ctx, "/SoundService/TranscribeFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundServiceClient) TranscribeLive(ctx context.Context, opts ...grpc.CallOption) (SoundService_TranscribeLiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &SoundService_ServiceDesc.Streams[0], "/SoundService/TranscribeLive", opts...)
	if err != nil {
		return nil, err
	}
	x := &soundServiceTranscribeLiveClient{stream}
	return x, nil
}

type SoundService_TranscribeLiveClient interface {
	Send(*TranscirptionLiveRequest) error
	Recv() (*SoundStreamResponse, error)
	grpc.ClientStream
}

type soundServiceTranscribeLiveClient struct {
	grpc.ClientStream
}

func (x *soundServiceTranscribeLiveClient) Send(m *TranscirptionLiveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *soundServiceTranscribeLiveClient) Recv() (*SoundStreamResponse, error) {
	m := new(SoundStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *soundServiceClient) TranslateFile(ctx context.Context, in *TranslationRequest, opts ...grpc.CallOption) (SoundService_TranslateFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &SoundService_ServiceDesc.Streams[1], "/SoundService/TranslateFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &soundServiceTranslateFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SoundService_TranslateFileClient interface {
	Recv() (*SoundResponse, error)
	grpc.ClientStream
}

type soundServiceTranslateFileClient struct {
	grpc.ClientStream
}

func (x *soundServiceTranslateFileClient) Recv() (*SoundResponse, error) {
	m := new(SoundResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *soundServiceClient) DiarizateFile(ctx context.Context, in *TranscriptionRequest, opts ...grpc.CallOption) (*SpeakerAndLineResponse, error) {
	out := new(SpeakerAndLineResponse)
	err := c.cc.Invoke(ctx, "/SoundService/DiarizateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoundServiceServer is the server API for SoundService service.
// All implementations must embed UnimplementedSoundServiceServer
// for forward compatibility
type SoundServiceServer interface {
	TestConnection(context.Context, *TextMessage) (*TextMessage, error)
	TranscribeFile(context.Context, *TranscriptionRequest) (*SoundResponse, error)
	TranscribeLive(SoundService_TranscribeLiveServer) error
	TranslateFile(*TranslationRequest, SoundService_TranslateFileServer) error
	DiarizateFile(context.Context, *TranscriptionRequest) (*SpeakerAndLineResponse, error)
	mustEmbedUnimplementedSoundServiceServer()
}

// UnimplementedSoundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSoundServiceServer struct {
}

func (UnimplementedSoundServiceServer) TestConnection(context.Context, *TextMessage) (*TextMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (UnimplementedSoundServiceServer) TranscribeFile(context.Context, *TranscriptionRequest) (*SoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranscribeFile not implemented")
}
func (UnimplementedSoundServiceServer) TranscribeLive(SoundService_TranscribeLiveServer) error {
	return status.Errorf(codes.Unimplemented, "method TranscribeLive not implemented")
}
func (UnimplementedSoundServiceServer) TranslateFile(*TranslationRequest, SoundService_TranslateFileServer) error {
	return status.Errorf(codes.Unimplemented, "method TranslateFile not implemented")
}
func (UnimplementedSoundServiceServer) DiarizateFile(context.Context, *TranscriptionRequest) (*SpeakerAndLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiarizateFile not implemented")
}
func (UnimplementedSoundServiceServer) mustEmbedUnimplementedSoundServiceServer() {}

// UnsafeSoundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoundServiceServer will
// result in compilation errors.
type UnsafeSoundServiceServer interface {
	mustEmbedUnimplementedSoundServiceServer()
}

func RegisterSoundServiceServer(s grpc.ServiceRegistrar, srv SoundServiceServer) {
	s.RegisterService(&SoundService_ServiceDesc, srv)
}

func _SoundService_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundServiceServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SoundService/TestConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundServiceServer).TestConnection(ctx, req.(*TextMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoundService_TranscribeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundServiceServer).TranscribeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SoundService/TranscribeFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundServiceServer).TranscribeFile(ctx, req.(*TranscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoundService_TranscribeLive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SoundServiceServer).TranscribeLive(&soundServiceTranscribeLiveServer{stream})
}

type SoundService_TranscribeLiveServer interface {
	Send(*SoundStreamResponse) error
	Recv() (*TranscirptionLiveRequest, error)
	grpc.ServerStream
}

type soundServiceTranscribeLiveServer struct {
	grpc.ServerStream
}

func (x *soundServiceTranscribeLiveServer) Send(m *SoundStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *soundServiceTranscribeLiveServer) Recv() (*TranscirptionLiveRequest, error) {
	m := new(TranscirptionLiveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SoundService_TranslateFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TranslationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SoundServiceServer).TranslateFile(m, &soundServiceTranslateFileServer{stream})
}

type SoundService_TranslateFileServer interface {
	Send(*SoundResponse) error
	grpc.ServerStream
}

type soundServiceTranslateFileServer struct {
	grpc.ServerStream
}

func (x *soundServiceTranslateFileServer) Send(m *SoundResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SoundService_DiarizateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundServiceServer).DiarizateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SoundService/DiarizateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundServiceServer).DiarizateFile(ctx, req.(*TranscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SoundService_ServiceDesc is the grpc.ServiceDesc for SoundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SoundService",
	HandlerType: (*SoundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestConnection",
			Handler:    _SoundService_TestConnection_Handler,
		},
		{
			MethodName: "TranscribeFile",
			Handler:    _SoundService_TranscribeFile_Handler,
		},
		{
			MethodName: "DiarizateFile",
			Handler:    _SoundService_DiarizateFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TranscribeLive",
			Handler:       _SoundService_TranscribeLive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TranslateFile",
			Handler:       _SoundService_TranslateFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend/ApiServer/proto/sound_transfer/sound_transfer.proto",
}
