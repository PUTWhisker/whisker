// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.0
// source: backend/ApiServer/proto/authentication/authentication.proto

package authentication

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientService_Login_FullMethodName                          = "/ClientService/Login"
	ClientService_Register_FullMethodName                       = "/ClientService/Register"
	ClientService_GetTranscription_FullMethodName               = "/ClientService/GetTranscription"
	ClientService_EditTranscription_FullMethodName              = "/ClientService/EditTranscription"
	ClientService_DeleteTranscription_FullMethodName            = "/ClientService/DeleteTranscription"
	ClientService_GetTranslation_FullMethodName                 = "/ClientService/GetTranslation"
	ClientService_EditTranslation_FullMethodName                = "/ClientService/EditTranslation"
	ClientService_DeleteTranslation_FullMethodName              = "/ClientService/DeleteTranslation"
	ClientService_SaveOnlyTranslation_FullMethodName            = "/ClientService/SaveOnlyTranslation"
	ClientService_GetDiarization_FullMethodName                 = "/ClientService/GetDiarization"
	ClientService_EditDiarization_FullMethodName                = "/ClientService/EditDiarization"
	ClientService_DeleteDiarization_FullMethodName              = "/ClientService/DeleteDiarization"
	ClientService_GetTranscriptionAndDiarization_FullMethodName = "/ClientService/GetTranscriptionAndDiarization"
)

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServiceClient interface {
	Login(ctx context.Context, in *UserCredits, opts ...grpc.CallOption) (*LoginResponse, error)
	Register(ctx context.Context, in *UserCredits, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTranscription(ctx context.Context, in *QueryParamethers, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TranscriptionHistory], error)
	EditTranscription(ctx context.Context, in *NewTranscription, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTranscription(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTranslation(ctx context.Context, in *QueryParamethers, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TranslationHistory], error)
	EditTranslation(ctx context.Context, in *NewTranslation, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTranslation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SaveOnlyTranslation(ctx context.Context, in *TranslationText, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDiarization(ctx context.Context, in *QueryParamethers, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DiarizationHistory], error)
	EditDiarization(ctx context.Context, in *NewDiarization, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteDiarization(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTranscriptionAndDiarization(ctx context.Context, in *QueryParamethers, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Combined], error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) Login(ctx context.Context, in *UserCredits, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, ClientService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) Register(ctx context.Context, in *UserCredits, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetTranscription(ctx context.Context, in *QueryParamethers, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TranscriptionHistory], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[0], ClientService_GetTranscription_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryParamethers, TranscriptionHistory]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientService_GetTranscriptionClient = grpc.ServerStreamingClient[TranscriptionHistory]

func (c *clientServiceClient) EditTranscription(ctx context.Context, in *NewTranscription, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_EditTranscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) DeleteTranscription(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_DeleteTranscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetTranslation(ctx context.Context, in *QueryParamethers, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TranslationHistory], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[1], ClientService_GetTranslation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryParamethers, TranslationHistory]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientService_GetTranslationClient = grpc.ServerStreamingClient[TranslationHistory]

func (c *clientServiceClient) EditTranslation(ctx context.Context, in *NewTranslation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_EditTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) DeleteTranslation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_DeleteTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) SaveOnlyTranslation(ctx context.Context, in *TranslationText, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_SaveOnlyTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetDiarization(ctx context.Context, in *QueryParamethers, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DiarizationHistory], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[2], ClientService_GetDiarization_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryParamethers, DiarizationHistory]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientService_GetDiarizationClient = grpc.ServerStreamingClient[DiarizationHistory]

func (c *clientServiceClient) EditDiarization(ctx context.Context, in *NewDiarization, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_EditDiarization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) DeleteDiarization(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_DeleteDiarization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetTranscriptionAndDiarization(ctx context.Context, in *QueryParamethers, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Combined], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[3], ClientService_GetTranscriptionAndDiarization_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryParamethers, Combined]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientService_GetTranscriptionAndDiarizationClient = grpc.ServerStreamingClient[Combined]

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility.
type ClientServiceServer interface {
	Login(context.Context, *UserCredits) (*LoginResponse, error)
	Register(context.Context, *UserCredits) (*emptypb.Empty, error)
	GetTranscription(*QueryParamethers, grpc.ServerStreamingServer[TranscriptionHistory]) error
	EditTranscription(context.Context, *NewTranscription) (*emptypb.Empty, error)
	DeleteTranscription(context.Context, *Id) (*emptypb.Empty, error)
	GetTranslation(*QueryParamethers, grpc.ServerStreamingServer[TranslationHistory]) error
	EditTranslation(context.Context, *NewTranslation) (*emptypb.Empty, error)
	DeleteTranslation(context.Context, *Id) (*emptypb.Empty, error)
	SaveOnlyTranslation(context.Context, *TranslationText) (*emptypb.Empty, error)
	GetDiarization(*QueryParamethers, grpc.ServerStreamingServer[DiarizationHistory]) error
	EditDiarization(context.Context, *NewDiarization) (*emptypb.Empty, error)
	DeleteDiarization(context.Context, *Id) (*emptypb.Empty, error)
	GetTranscriptionAndDiarization(*QueryParamethers, grpc.ServerStreamingServer[Combined]) error
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientServiceServer struct{}

func (UnimplementedClientServiceServer) Login(context.Context, *UserCredits) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedClientServiceServer) Register(context.Context, *UserCredits) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedClientServiceServer) GetTranscription(*QueryParamethers, grpc.ServerStreamingServer[TranscriptionHistory]) error {
	return status.Errorf(codes.Unimplemented, "method GetTranscription not implemented")
}
func (UnimplementedClientServiceServer) EditTranscription(context.Context, *NewTranscription) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTranscription not implemented")
}
func (UnimplementedClientServiceServer) DeleteTranscription(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTranscription not implemented")
}
func (UnimplementedClientServiceServer) GetTranslation(*QueryParamethers, grpc.ServerStreamingServer[TranslationHistory]) error {
	return status.Errorf(codes.Unimplemented, "method GetTranslation not implemented")
}
func (UnimplementedClientServiceServer) EditTranslation(context.Context, *NewTranslation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTranslation not implemented")
}
func (UnimplementedClientServiceServer) DeleteTranslation(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTranslation not implemented")
}
func (UnimplementedClientServiceServer) SaveOnlyTranslation(context.Context, *TranslationText) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOnlyTranslation not implemented")
}
func (UnimplementedClientServiceServer) GetDiarization(*QueryParamethers, grpc.ServerStreamingServer[DiarizationHistory]) error {
	return status.Errorf(codes.Unimplemented, "method GetDiarization not implemented")
}
func (UnimplementedClientServiceServer) EditDiarization(context.Context, *NewDiarization) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDiarization not implemented")
}
func (UnimplementedClientServiceServer) DeleteDiarization(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiarization not implemented")
}
func (UnimplementedClientServiceServer) GetTranscriptionAndDiarization(*QueryParamethers, grpc.ServerStreamingServer[Combined]) error {
	return status.Errorf(codes.Unimplemented, "method GetTranscriptionAndDiarization not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}
func (UnimplementedClientServiceServer) testEmbeddedByValue()                       {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Login(ctx, req.(*UserCredits))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Register(ctx, req.(*UserCredits))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetTranscription_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryParamethers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServiceServer).GetTranscription(m, &grpc.GenericServerStream[QueryParamethers, TranscriptionHistory]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientService_GetTranscriptionServer = grpc.ServerStreamingServer[TranscriptionHistory]

func _ClientService_EditTranscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTranscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).EditTranscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_EditTranscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).EditTranscription(ctx, req.(*NewTranscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_DeleteTranscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).DeleteTranscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_DeleteTranscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).DeleteTranscription(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetTranslation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryParamethers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServiceServer).GetTranslation(m, &grpc.GenericServerStream[QueryParamethers, TranslationHistory]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientService_GetTranslationServer = grpc.ServerStreamingServer[TranslationHistory]

func _ClientService_EditTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTranslation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).EditTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_EditTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).EditTranslation(ctx, req.(*NewTranslation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_DeleteTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).DeleteTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_DeleteTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).DeleteTranslation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_SaveOnlyTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslationText)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).SaveOnlyTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_SaveOnlyTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).SaveOnlyTranslation(ctx, req.(*TranslationText))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetDiarization_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryParamethers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServiceServer).GetDiarization(m, &grpc.GenericServerStream[QueryParamethers, DiarizationHistory]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientService_GetDiarizationServer = grpc.ServerStreamingServer[DiarizationHistory]

func _ClientService_EditDiarization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDiarization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).EditDiarization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_EditDiarization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).EditDiarization(ctx, req.(*NewDiarization))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_DeleteDiarization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).DeleteDiarization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_DeleteDiarization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).DeleteDiarization(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetTranscriptionAndDiarization_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryParamethers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServiceServer).GetTranscriptionAndDiarization(m, &grpc.GenericServerStream[QueryParamethers, Combined]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientService_GetTranscriptionAndDiarizationServer = grpc.ServerStreamingServer[Combined]

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ClientService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ClientService_Register_Handler,
		},
		{
			MethodName: "EditTranscription",
			Handler:    _ClientService_EditTranscription_Handler,
		},
		{
			MethodName: "DeleteTranscription",
			Handler:    _ClientService_DeleteTranscription_Handler,
		},
		{
			MethodName: "EditTranslation",
			Handler:    _ClientService_EditTranslation_Handler,
		},
		{
			MethodName: "DeleteTranslation",
			Handler:    _ClientService_DeleteTranslation_Handler,
		},
		{
			MethodName: "SaveOnlyTranslation",
			Handler:    _ClientService_SaveOnlyTranslation_Handler,
		},
		{
			MethodName: "EditDiarization",
			Handler:    _ClientService_EditDiarization_Handler,
		},
		{
			MethodName: "DeleteDiarization",
			Handler:    _ClientService_DeleteDiarization_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTranscription",
			Handler:       _ClientService_GetTranscription_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTranslation",
			Handler:       _ClientService_GetTranslation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDiarization",
			Handler:       _ClientService_GetDiarization_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTranscriptionAndDiarization",
			Handler:       _ClientService_GetTranscriptionAndDiarization_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend/ApiServer/proto/authentication/authentication.proto",
}
