syntax = "proto3";
package sound_transfer;

option go_package = "inzynierka/sound_transfer";
option java_multiple_files = true;
option java_package = "io.grpc.soundtransfer";
option java_outer_classname = "SoundTransferProto";




service SoundService {
    // Test connection to the gRPC server
    rpc TestConnection(TextMessage) returns (TextMessage) {};
    // Send an audio file for transcription
    rpc TranscribeFile(TranscriptionRequest) returns (SoundResponse) {};
    // Stream audio chunks for live transcription
    rpc TranscribeLive(stream TranscirptionLiveRequest) returns (stream SoundStreamResponse);
    // Live transcription without streaming (for grpc-web library)
    rpc TranscribeLiveWeb(TranscriptionRequest) returns (SoundStreamResponse);
    // Send an audio file for translation
    rpc TranslateFile(TranslationRequest) returns (stream SoundResponse);
    // Send an audio file for transcription with audio diarization
    rpc DiarizateFile(TranscriptionRequest) returns (SpeakerAndLineResponse);
    // Send a text for translation
    rpc TranslateText(TextAndId) returns (TextMessage);
}

// sound_service.TextMessage
message TextMessage {
    // Random seed
    string text = 1;
}

// sound_service.TranscriptionRequest
message TranscriptionRequest {
    // Selected file's raw bytes
    bytes sound_data = 1;
    // Selected file's language
    string source_language = 2; 
    // Selected file's title
    string title = 3;
}

// sound_service.TranslationRequest
message TranslationRequest {
    // Selected file's raw bytes
    bytes sound_data = 1;
    // Selected file's language
    string source_language = 2;
    // Desired translation language
    string translation_language = 3;  
    // Selected file's title
    string title = 4;
}

// sound_service.TranscriptionLiveRequest
message TranscirptionLiveRequest {
    // Selected file's raw bytes
    bytes sound_data = 1;
}

// sound_service.SoundResponse
message SoundResponse {
    // Transcription of the audio file
    string text = 1;
    // Detected language by speech-to-text model
    string detected_language = 2;
    // Id of the transcription
    int32 id = 3;
}

// sound_service.SoundStreamResponse
message SoundStreamResponse {
    // Transcription of the audio file
    string text = 1;
    // Informs whether server treated provided segment as new batch
    bool new_chunk = 2;
}

// sound_service.SpeakerAndLineResponse
message SpeakerAndLineResponse {
    // Array of transcriptions of the audio file, order preserved
    repeated string text = 1;
    // Array of recognised speakers in the audio file, order preserved
    repeated string speakerName = 2;
    // Detected language by speech-to-text model
    string detected_language = 3;
}

// sound_service.TextAndId
message TextAndId {
    // Text to be translated
    string text = 1;
    // Original text's language
    string text_language = 3;
    // Desired translation language
    string translation_language = 4;
}
