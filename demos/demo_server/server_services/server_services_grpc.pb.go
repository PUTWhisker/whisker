// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: server_services.proto

package server_services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectionTestClient is the client API for ConnectionTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionTestClient interface {
	TestConnection(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*TextMessage, error)
}

type connectionTestClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionTestClient(cc grpc.ClientConnInterface) ConnectionTestClient {
	return &connectionTestClient{cc}
}

func (c *connectionTestClient) TestConnection(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*TextMessage, error) {
	out := new(TextMessage)
	err := c.cc.Invoke(ctx, "/connectionTest/TestConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionTestServer is the server API for ConnectionTest service.
// All implementations must embed UnimplementedConnectionTestServer
// for forward compatibility
type ConnectionTestServer interface {
	TestConnection(context.Context, *TextMessage) (*TextMessage, error)
	mustEmbedUnimplementedConnectionTestServer()
}

// UnimplementedConnectionTestServer must be embedded to have forward compatible implementations.
type UnimplementedConnectionTestServer struct {
}

func (UnimplementedConnectionTestServer) TestConnection(context.Context, *TextMessage) (*TextMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (UnimplementedConnectionTestServer) mustEmbedUnimplementedConnectionTestServer() {}

// UnsafeConnectionTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionTestServer will
// result in compilation errors.
type UnsafeConnectionTestServer interface {
	mustEmbedUnimplementedConnectionTestServer()
}

func RegisterConnectionTestServer(s grpc.ServiceRegistrar, srv ConnectionTestServer) {
	s.RegisterService(&ConnectionTest_ServiceDesc, srv)
}

func _ConnectionTest_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionTestServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connectionTest/TestConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionTestServer).TestConnection(ctx, req.(*TextMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionTest_ServiceDesc is the grpc.ServiceDesc for ConnectionTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connectionTest",
	HandlerType: (*ConnectionTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestConnection",
			Handler:    _ConnectionTest_TestConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server_services.proto",
}
